{"entries":[{"timestamp":1742665578777,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"main.blocks","patch":[{"diffs":[[0,"http"],[-1,"s"],[0,"://"],[-1,"developers.google.com/blockly/xml\"><variables></variables>"],[1,"www.w3.org/1999/xhtml\">\n  "],[0,"<blo"]],"start1":12,"start2":12,"length1":70,"length2":37},{"diffs":[[0,"art\""],[-1," x=\"20\" y=\"20\""],[0,"></b"]],"start1":67,"start2":67,"length1":22,"length2":8},{"diffs":[[0,"</block>"],[1,"\n  "],[0,"<block t"]],"start1":72,"start2":72,"length1":16,"length2":19},{"diffs":[[0,"ver\""],[-1," x=\"225\" y=\"20\""],[0,"></b"]],"start1":107,"start2":107,"length1":23,"length2":8},{"diffs":[[0,"</block>"],[1,"\n"],[0,"</xml>"]],"start1":112,"start2":112,"length1":14,"length2":15}]},{"type":"edited","filename":"main.ts","patch":[{"diffs":[[-1,"// Two cases : bound for position or client who searching position\n\nfunction ConfigureBoundary(position: number) {\n    basic.clearScreen()\n    radio.setGroup(1);\n    led.setBrightness(255)\n    radio.setTransmitSerialNumber(true)\n\n    let transmitPower = 6;\n    //Change transmit power\n    input.onButtonPressed(Button.A, () => {\n        transmitPower = (transmitPower + 1) % 8\n        radio.setTransmitPower(transmitPower)\n        basic.showNumber(transmitPower)\n    })\n    // Change group\n    input.onButtonPressed(Button.B, () => {\n\n        \n    })\n    radio.onReceivedString(msg => {\n        if (msg !== \"REQ\") {\n            return;\n        }\n        basic.pause(position * 150)\n        const id = radio.receivedPacket(1);\n        radio.sendString(`ACK:${id}:${position}`)\n        basic.showIcon(IconNames.SmallSquare)\n        basic.showIcon(IconNames.Square)\n        basic.showIcon(IconNames.SmallSquare)\n        basic.pause(300)\n        basic.clearScreen()\n    })\n}\n\nfunction transformPower(value: number): number {\n    // Affine function y = x (-√2/20) + 5√2\n    return value * (Math.sqrt(2) / -20) + 5 * Math.sqrt(2);\n}\n\nfunction computePosition(strengths: number[]) {\n    //basic.showIcon(IconNames.Rollerskate)\n    const longDistance = Math.sqrt(2) * 4\n    // Transform power to relative distance. 100 is distance 0, 50 is half, 20 is long (arbiatrary)\n    const dA = transformPower(strengths[0]);\n    const dB = transformPower(strengths[1]);\n    const dC = transformPower(strengths[2]);\n    // Resolve equation\n    const y = Math.sqrt(dA * dA - Math.pow((dA * dA - dB * dB + 16) / 8, 2))\n    const x = Math.sqrt(dA * dA - y * y)\n    basic.clearScreen()\n    led.plot(x, y)\n}\n\nfunction ConfigureClient() {\n    radio.setGroup(1)\n\n    radio.setTransmitSerialNumber(true)\n    led.setBrightness(255)\n    basic.clearScreen()\n    let strengths = [0, 0, 0]\n    let count = 0\n    input.onButtonPressed(Button.A, () => {\n        strengths = [0, 0, 0]\n        //basic.clearScreen()\n        radio.sendString(\"REQ\")\n    });\n\n    radio.onReceivedString(msg => {\n        if (msg.indexOf(\"ACK:\") === 0) {\n            const id = parseInt(msg.split(\":\")[1])\n            if (id !== control.deviceSerialNumber()) {\n                return;\n            }\n        } else {\n            return;\n        }\n        const position = parseInt(msg.split(\":\")[2])\n        const signal = radio.receivedPacket(2) + 128\n        strengths[position] = signal;\n        showReception(strengths.filter(v => v !== 0).length)\n        if (!strengths.some(v => v === 0)) {\n            computePosition(strengths);\n        }\n    })\n}\n\nfunction showReception(value: number) {\n    basic.clearScreen();\n    led.plot(0, 0)\n    if (value > 1) {\n        led.plot(1, 0)\n    }\n    if (value > 2) {\n        led.plot(2, 0)\n    }\n}\n\nclass Configuration {\n    constructor(private isBoundary: boolean = true) {\n        new KindConfig((isBoundary: boolean) => this.finishConfig(isBoundary));\n    }\n    finishConfig(isBoundary: boolean) {\n        this.isBoundary = isBoundary;\n        if (this.isBoundary) {\n            new ChooseBoundaryPosition((position: number) => ConfigureBoundary(position));\n        } else {\n            ConfigureClient();\n        }\n    }\n}\n\nclass KindConfig {\n    constructor(next: (isBoudary: boolean) => void, private isBoundary: boolean = true) {\n        input.onButtonPressed(Button.A, () => this.changeKind());\n        input.onButtonPressed(Button.B, () => next(this.isBoundary));\n        this.show();\n    }\n    changeKind() {\n        this.isBoundary = !this.isBoundary;\n        this.show();\n    }\n    show() {\n        if (this.isBoundary) {\n            basic.showIcon(IconNames.Square)\n        } else {\n            basic.clearScreen()\n            led.plot(2, 2)\n        }\n    }\n}\n\nclass ChooseBoundaryPosition {\n    constructor(next: (position: number) => void, private position: number = 0) {\n        input.onButtonPressed(Button.A, () => this.changePosition());\n        input.onButtonPressed(Button.B, () => next(this.position));\n        this.show();\n    }\n    changePosition() {\n        this.position = (this.position + 1) % 3;\n        this.show();\n    }\n    show() {\n        basic.clearScreen();\n        switch (this.position) {\n            case 0: showBlock(0, 0); break;\n            case 1: showBlock(3, 0); break;\n            //case 2: showBlock(3, 3); break;\n            case 2: showBlock(0, 3); break;\n        }\n    }\n}\n\nfunction showBlock(x: number, y: number) {\n    led.plot(x, y)\n    led.plot(x, y + 1)\n    led.plot(x + 1, y)\n    led.plot(x + 1, y + 1)\n}\n\nnew Configuration()"],[1,"\n"]],"start1":0,"start2":0,"length1":4567,"length2":1}]},{"type":"edited","filename":"pxt.json","patch":[{"diffs":[[0,"   \""],[-1,"preferredEditor\": \"tsprj\""],[1,"additionalFilePaths\": []"],[0,"\n}\n"]],"start1":238,"start2":238,"length1":32,"length2":31}]}]},{"timestamp":1742666122113,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"on\n\n"],[-1,"let tagRadioGoup = 0;\n"],[0,"func"]],"start1":64,"start2":64,"length1":30,"length2":8},{"diffs":[[0,"io.setGroup("],[-1,"tagRadioGoup"],[1,"1"],[0,");\n    led.s"]],"start1":146,"start2":146,"length1":36,"length2":25},{"diffs":[[0,"> {\n"],[1,"\n"],[0,"        "],[-1,"tagRadioGoup=(tagRadioGoup+1)%255;\n        radio.setGroup(tagRadioGoup);\n        basic.showNumber(tagRadioGoup)\n        basic.pause(1000)\n        basic.clearScreen();\n"],[0,"\n   "]],"start1":530,"start2":530,"length1":183,"length2":17},{"diffs":[[0,"(next: ("],[-1,"group"],[1,"position"],[0,": number"]],"start1":3807,"start2":3807,"length1":21,"length2":24},{"diffs":[[0,"private "],[-1,"group"],[1,"position"],[0,": number"]],"start1":3842,"start2":3842,"length1":21,"length2":24},{"diffs":[[0,"s.change"],[-1,"Group"],[1,"Position"],[0,"());\n   "]],"start1":3923,"start2":3923,"length1":21,"length2":24},{"diffs":[[0,"xt(this."],[-1,"group"],[1,"position"],[0,"));\n    "]],"start1":3992,"start2":3992,"length1":21,"length2":24},{"diffs":[[0,"  change"],[-1,"Group"],[1,"Position"],[0,"() {\n   "]],"start1":4041,"start2":4041,"length1":21,"length2":24},{"diffs":[[0,"   this."],[-1,"group"],[1,"position"],[0," = (this"]],"start1":4067,"start2":4067,"length1":21,"length2":24},{"diffs":[[0,"his."],[-1,"group"],[1,"position"],[0," + 1) % "],[-1,"255"],[1,"3"],[0,";\n  "]],"start1":4088,"start2":4088,"length1":24,"length2":25},{"diffs":[[0,"sic."],[-1,"showNumber(this.group);"],[1,"clearScreen();\n        switch (this.position) {\n            case 0: showBlock(0, 0); break;\n            case 1: showBlock(3, 0); break;\n            //case 2: showBlock(3, 3); break;\n            case 2: showBlock(0, 3); break;\n        }"],[0,"\n   "]],"start1":4161,"start2":4161,"length1":31,"length2":243}]}]},{"timestamp":1742666393505,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"sition\n\n"],[1,"let tagRadioGoup = 0;\n"],[0,"function"]],"start1":60,"start2":60,"length1":16,"length2":38},{"diffs":[[0,"gure"],[-1,"Tag(group"],[1,"Boundary(position"],[0,": nu"]],"start1":104,"start2":104,"length1":17,"length2":25},{"diffs":[[0,"etGroup("],[-1,"gr"],[1,"tagRadioG"],[0,"oup);\n  "]],"start1":172,"start2":172,"length1":18,"length2":25},{"diffs":[[0,"\n   "],[-1,"\n   // Send "],[1," // Change group\n    input.onButtonPressed(Button.B, () => {\n        tagRadioGoup=(tagRadioGoup+1)%255;\n        radio.setGroup(tagRadioGoup);\n        basic.showNumber(tagRadioGoup)\n        basic.pause(1000)\n        basic.clearScreen();\n\n    })"],[0,"\n   "]],"start1":502,"start2":502,"length1":20,"length2":251},{"diffs":[[0,"turn;\n        }\n"],[1,"        basic.pause(position * 150)\n"],[0,"        const id"]],"start1":829,"start2":829,"length1":32,"length2":68},{"diffs":[[0,"oose"],[-1,"TagGroup((group"],[1,"BoundaryPosition((position"],[0,": nu"]],"start1":3274,"start2":3274,"length1":23,"length2":34},{"diffs":[[0,"onfigure"],[-1,"Tag"],[1,"Boundary"],[0,"(positio"]],"start1":3318,"start2":3318,"length1":19,"length2":24},{"diffs":[[0,"oose"],[-1,"TagGroup"],[1,"BoundaryPosition"],[0," {\n "]],"start1":3968,"start2":3968,"length1":16,"length2":24},{"diffs":[[0,"   }\n}\n\n"],[1,"function showBlock(x: number, y: number) {\n    led.plot(x, y)\n    led.plot(x, y + 1)\n    led.plot(x + 1, y)\n    led.plot(x + 1, y + 1)\n}\n\n"],[0,"new Conf"]],"start1":4370,"start2":4370,"length1":16,"length2":154}]}]},{"timestamp":1742666991149,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"oup(group);\n"],[1,"    led.setBrightness(255)\n"],[0,"    radio.se"]],"start1":146,"start2":146,"length1":24,"length2":51},{"diffs":[[0,"ue)\n"],[-1,"    basic.showNumber(group)"],[0,"\n   "]],"start1":221,"start2":221,"length1":35,"length2":8},{"diffs":[[0,"er = 6;\n"],[-1,"    \n"],[0,"    //Ch"]],"start1":245,"start2":245,"length1":21,"length2":16},{"diffs":[[0,"    "],[-1,"    basic.pause(2000)\n        basic.showNumber(group)\n    }"],[1,"})\n   \n   // Send \n    radio.onReceivedString(msg => {\n        if (msg !== \"REQ\") {\n            return;\n        }\n        const id = radio.receivedPacket(1);\n        radio.sendString(`ACK:${id}:${position}`)\n        basic.showIcon(IconNames.SmallSquare)\n        basic.showIcon(IconNames.Square"],[0,")\n   "],[-1,"\n"],[0,"   "],[-1,"// Send message every second\n   basic.forever(()=> {\n       radio.sendString(\"TAG\""],[1,"  basic.showIcon(IconNames.SmallSquare)\n        basic.pause(300)\n        basic.clearScreen("],[0,")\n"],[1," "],[0,"   }"]],"start1":459,"start2":459,"length1":160,"length2":403},{"diffs":[[0,"= 0\n"],[-1,"    // Next tag\n"],[0,"    "]],"start1":1767,"start2":1767,"length1":24,"length2":8},{"diffs":[[0,");\n\n"],[-1,"    // Previous tag\n    \n"],[0,"    "]],"start1":1912,"start2":1912,"length1":33,"length2":8},{"diffs":[[0,"agGroup("],[1,"(group: number) => "],[0,"Configur"]],"start1":2975,"start2":2975,"length1":16,"length2":35},{"diffs":[[0,"igureTag"],[1,"(position)"],[0,");\n     "]],"start1":3006,"start2":3006,"length1":16,"length2":26}]}]},{"timestamp":1742667208227,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"    "],[-1,"let currentRadioGroup = 0;\n    radio.setGroup(currentRadioGroup)\n"],[1,"radio.setGroup(1)\n\n    radio.setTransmitSerialNumber(true)\n    led.setBrightness(255)"],[0,"\n   "]],"start1":1371,"start2":1371,"length1":73,"length2":93},{"diffs":[[0,"    "],[-1,"currentRadioGroup = (currentRadioGroup + 1)%255"],[1,"strengths = [0, 0, 0]"],[0,"\n   "]],"start1":1597,"start2":1597,"length1":55,"length2":29},{"diffs":[[0,"    "],[1,"//"],[0,"basic."],[-1,"showNumber(currentRadioGroup)\n        radio.setGroup(currentRadioGroup)\n        // Could try with frequency also"],[1,"clearScreen()\n        radio.sendString(\"REQ\")"],[0,"\n   "]],"start1":1627,"start2":1627,"length1":126,"length2":61},{"diffs":[[0,"ous tag\n"],[1,"    "],[0,"\n    rad"]],"start1":1706,"start2":1706,"length1":16,"length2":20}]}]},{"timestamp":1742667747099,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"ion "],[-1,"changeGroup(shift: number){\n    currentRadioGroup = (currentRadioGroup + shift) % 255\n    basic.showNumber(currentRadioGroup)\n    radio.setGroup(currentRadioGroup)\n    // Could try with frequency also\n}\n\nlet currentRadioGroup = 0;\nfunction ConfigureClient() {\n    \n    radio.setGroup(currentRadioGroup)\n\n    basic.clearScreen()\n    let strengths = [0, 0, 0]\n    let count = 0\n    // Next tag\n    input.onButtonPressed(Button.A, () => {\n        changeGroup(1)\n    });\n    input.onButtonPressed(Button.B, () => {\n        changeGroup(-1)\n    });\n\n    // When tag is found (enough close, power > 90), validate target\n    input.onLogoEvent(TouchButtonEvent.Pressed,()=> {"],[1,"ConfigureClient() {\n    let currentRadioGroup = 0;\n    radio.setGroup(currentRadioGroup)\n\n    basic.clearScreen()\n    let strengths = [0, 0, 0]\n    let count = 0\n    // Next tag\n    input.onButtonPressed(Button.A, () => {\n        currentRadioGroup = (currentRadioGroup + 1)%255\n        basic.showNumber(currentRadioGroup)"],[0,"\n   "]],"start1":1347,"start2":1347,"length1":674,"length2":329},{"diffs":[[0,"    "],[-1,"if("],[0,"radio."],[-1,"receivedPacket(2) + 128 > 90){\n  "],[1,"setGroup(currentRadioGroup)\n"],[0,"        "],[-1,"  "],[0,"// "],[-1,"OK\n        }"],[1,"Could try with frequency also"],[0,"\n    })"],[1,";\n"],[0,"\n   "]],"start1":1677,"start2":1677,"length1":82,"length2":91},{"diffs":[[0,"Of(\""],[-1,"TAG\") !"],[1,"ACK:\") ="],[0,"== 0"]],"start1":1843,"start2":1843,"length1":15,"length2":16},{"diffs":[[0,"    "],[-1,"basic.showIcon(IconNames.Target)\n            return;\n        }\n        const signal = radio.receivedPacket(2) + 128\n        if(signal > 80){\n\n        }\n        if (signal > 60 && signal <"],[1,"const id = parseInt(msg.split(\":\")[1])\n            if (id !== control.deviceSerialNumber()) {\n                return;\n            }\n        } else {\n            return;\n        }\n        const position = parseInt(msg.split(\":\")[2])\n        const signal = radio.receivedPacket(2) + 128\n        strengths[position] = signal;\n        showReception(strengths.filter(v => v !="],[0,"= "],[-1,"8"],[0,"0)"],[-1," {\n\n        }\n        if (signal > 40 && signal <= 60"],[1,".length)\n        if (!strengths.some(v => v === 0)"],[0,") {\n"],[-1,"\n"],[0,"        "],[-1,"}\n"],[0,"    "],[-1,"    if (signal > 20 && signal <= 40) {\n"],[1,"computePosition(strengths);"],[0,"\n   "]],"start1":1871,"start2":1871,"length1":311,"length2":476}]}]},{"timestamp":1742668190665,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"\n}\n\n"],[-1,"func \n\n"],[0,"func"]],"start1":2530,"start2":2530,"length1":15,"length2":8}]}]},{"timestamp":1742680134901,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"}\n\nfunc "],[-1,"s"],[0,"\n\nfuncti"]],"start1":2531,"start2":2531,"length1":17,"length2":16}]}]},{"timestamp":1742680135990,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"2) + 128"],[-1,";"],[0,"\n       "]],"start1":2317,"start2":2317,"length1":17,"length2":16},{"diffs":[[0,"    "],[-1,"showLine(Math.floor(signal / 20))\n    })\n}\n\nfunction showLine(line: number){\n    basic.clearScreen()\n    for(let i = 0 ; i <= line ; i++){\n        for(let j = 0 ; j <= 4 ; j++){"],[1,"if(signal > 80){\n\n        }\n        if (signal > 60 && signal <= 80) {\n\n        }\n        if (signal > 40 && signal <= 60) {\n"],[0,"\n   "]],"start1":2330,"start2":2330,"length1":185,"length2":133},{"diffs":[[0,"    "],[1,"}\n"],[0,"    "],[-1,"led.plot(i,j);"],[1,"    if (signal > 20 && signal <= 40) {\n"],[0,"\n   "]],"start1":2464,"start2":2464,"length1":26,"length2":53},{"diffs":[[0," }\n    }"],[1,")"],[0,"\n}\n\n"],[1,"func s\n\n"],[0,"function"]],"start1":2521,"start2":2521,"length1":20,"length2":29}]}]},{"timestamp":1742680259139,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"sqrt(2);\n}\n\n"],[1,"function computePosition(strengths: number[]) {\n    //basic.showIcon(IconNames.Rollerskate)\n    const longDistance = Math.sqrt(2) * 4\n    // Transform power to relative distance. 100 is distance 0, 50 is half, 20 is long (arbiatrary)\n    const dA = transformPower(strengths[0]);\n    const dB = transformPower(strengths[1]);\n    const dC = transformPower(strengths[2]);\n    // Resolve equation\n    const y = Math.sqrt(dA * dA - Math.pow((dA * dA - dB * dB + 16) / 8, 2))\n    const x = Math.sqrt(dA * dA - y * y)\n    basic.clearScreen()\n    led.plot(x, y)\n}\n\n"],[0,"function cha"]],"start1":773,"start2":773,"length1":24,"length2":581}]}]},{"timestamp":1742748018774,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"  })\n}\n\n"],[1,"function transformPower(value: number): number {\n    // Affine function y = x (-√2/20) + 5√2\n    return value * (Math.sqrt(2) / -20) + 5 * Math.sqrt(2);\n}\n"],[0,"\nfunctio"]],"start1":621,"start2":621,"length1":16,"length2":171}]}]},{"timestamp":1742748028602,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"\n   "],[-1,"    basic.pause(1000);\n   "],[0,"})\n}"],[1,"\n"],[0,"\n\nfu"]],"start1":619,"start2":619,"length1":38,"length2":13},{"diffs":[[0," OK\n"],[-1,"            basic.showIcon(IconNames.Yes)\n"],[0,"    "]],"start1":1368,"start2":1368,"length1":50,"length2":8}]}]},{"timestamp":1742748540020,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"    "],[-1,"})\n\n    input.onLogoEvent(TouchButtonEvent.Pressed, () =>"],[1,"    basic.pause(2000)\n       "],[0," bas"]],"start1":464,"start2":464,"length1":65,"length2":37},{"diffs":[[0,"r(group)"],[1,"\n    }"],[0,")\n   \n  "]],"start1":513,"start2":513,"length1":16,"length2":22},{"diffs":[[0,"hift"],[-1," + 255"],[0,") % "]],"start1":738,"start2":738,"length1":14,"length2":8},{"diffs":[[0,"    "],[-1,"let  "],[0,"\n   "]],"start1":924,"start2":924,"length1":13,"length2":8},{"diffs":[[0,"oup("],[-1,"-"],[0,"1)\n "]],"start1":1116,"start2":1116,"length1":9,"length2":8},{"diffs":[[0,"tton.B, () => {\n"],[-1,""],[0,"        changeGr"]],"start1":1159,"start2":1159,"length1":32,"length2":32},{"diffs":[[0,"    changeGroup("],[1,"-"],[0,"1)\n    });\n\n    "]],"start1":1179,"start2":1179,"length1":32,"length2":33}]}]},{"timestamp":1742749080218,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0," let"],[-1," results ="],[0,"  \n "]],"start1":955,"start2":955,"length1":18,"length2":8}]}]},{"timestamp":1742761687217,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"s = "],[-1,"[]"],[0," \n  "]],"start1":966,"start2":966,"length1":10,"length2":8}]}]},{"timestamp":1742761688599,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"\n}\n\n"],[-1,"function alreadyFound():boolean {\n    return \n}\n\nlet currentRadioGroup = 0;\nlet results: boolean[] = []"],[1,"let currentRadioGroup = 0"],[0,";\nfu"]],"start1":892,"start2":892,"length1":111,"length2":33},{"diffs":[[0,"ent() {\n    "],[1,"let results = [] "],[0,"\n    radio.s"]],"start1":944,"start2":944,"length1":24,"length2":41},{"diffs":[[0,"> {\n"],[-1,"        if()\n"],[0,"    "]],"start1":1372,"start2":1372,"length1":21,"length2":8},{"diffs":[[0," OK\n"],[-1,"            results[currentRadioGroup] = true;\n"],[0,"    "]],"start1":1438,"start2":1438,"length1":55,"length2":8}]}]},{"timestamp":1742761872823,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"urn "],[-1,"let results: boolean[] = [];"],[0,"\n}\n\n"]],"start1":937,"start2":937,"length1":36,"length2":8}]}]},{"timestamp":1742762940057,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"[] = [];"],[-1," "],[0,"\n}\n\nlet "]],"start1":961,"start2":961,"length1":17,"length2":16}]}]},{"timestamp":1742762940854,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"up)\n"],[-1,"    if(alreadyFound()){\n        basic.showIcon(IconNames.Yes)\n    }\n"],[0,"    "]],"start1":852,"start2":852,"length1":76,"length2":8},{"diffs":[[0,"urn "],[1,"let "],[0,"results"],[-1,"[currentRadioGroup"],[1,": boolean["],[0,"] "],[-1,"!"],[0,"= "],[-1,"null && results[currentRadioGroup"],[1,"["],[0,"];"],[1," "],[0,"\n}\n\n"]],"start1":937,"start2":937,"length1":73,"length2":37},{"diffs":[[0," if("],[-1,"alreadyFound()){\n            return;\n        }"],[1,")"],[0,"\n   "]],"start1":1473,"start2":1473,"length1":54,"length2":9},{"diffs":[[0,"> {\n"],[-1,"        if (alreadyFound()){\n            return;\n        }\n"],[0,"    "]],"start1":1704,"start2":1704,"length1":67,"length2":8}]}]},{"timestamp":1742763050657,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"main.blocks","patch":[{"diffs":[[0,"art\""],[-1," id=\"otpq$xT]bja?FhVw?c{R\""],[0," x=\""]],"start1":100,"start2":100,"length1":34,"length2":8},{"diffs":[[0,"ver\""],[-1," id=\"e0z~QF=Lk5lIcIuyT_Op\""],[0," x=\""]],"start1":151,"start2":151,"length1":34,"length2":8}]}]},{"timestamp":1742763880991,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"pxt.json","patch":[{"diffs":[[0," ],\n"],[-1,"    \"testFiles\": [\n        \"test.ts\"\n    ],\n"],[0,"    "]],"start1":233,"start2":233,"length1":52,"length2":8}]},{"type":"added","filename":"test.ts","value":"// les tests vont ici ; cela ne sera pas compilé si ce paquet est utilisé en tant qu'extension.\n"}]}],"snapshots":[{"timestamp":1742665578776,"editorVersion":"7.0.57","text":{"main.blocks":"<xml xmlns=\"http://www.w3.org/1999/xhtml\">\n  <block type=\"pxt-on-start\"></block>\n  <block type=\"device_forever\"></block>\n</xml>","main.ts":"\n","README.md":"","pxt.json":"{\n    \"name\": \"Burn cold game\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\"\n    ],\n    \"additionalFilePaths\": []\n}\n"}},{"timestamp":1742667598318,"editorVersion":"7.0.57","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"pxt-on-start\" x=\"20\" y=\"20\"></block><block type=\"device_forever\" x=\"225\" y=\"20\"></block></xml>","main.ts":"// Two cases : bound for position or client who searching position\n\nfunction ConfigureTag(group: number) {\n    basic.clearScreen()\n    radio.setGroup(group);\n    radio.setTransmitSerialNumber(true)\n    basic.showNumber(group)\n    let transmitPower = 6;\n    \n    //Change transmit power\n    input.onButtonPressed(Button.A, () => {\n        transmitPower = (transmitPower + 1) % 8\n        radio.setTransmitPower(transmitPower)\n        basic.showNumber(transmitPower)\n        basic.pause(2000)\n        basic.showNumber(group)\n    })\n   \n   // Send message every second\n   basic.forever(()=> {\n       radio.sendString(\"TAG\")\n   })\n}\n\nfunction transformPower(value: number): number {\n    // Affine function y = x (-√2/20) + 5√2\n    return value * (Math.sqrt(2) / -20) + 5 * Math.sqrt(2);\n}\n\nfunction computePosition(strengths: number[]) {\n    //basic.showIcon(IconNames.Rollerskate)\n    const longDistance = Math.sqrt(2) * 4\n    // Transform power to relative distance. 100 is distance 0, 50 is half, 20 is long (arbiatrary)\n    const dA = transformPower(strengths[0]);\n    const dB = transformPower(strengths[1]);\n    const dC = transformPower(strengths[2]);\n    // Resolve equation\n    const y = Math.sqrt(dA * dA - Math.pow((dA * dA - dB * dB + 16) / 8, 2))\n    const x = Math.sqrt(dA * dA - y * y)\n    basic.clearScreen()\n    led.plot(x, y)\n}\n\nfunction ConfigureClient() {\n    radio.setGroup(1)\n\n    radio.setTransmitSerialNumber(true)\n    led.setBrightness(255)\n    basic.clearScreen()\n    let strengths = [0, 0, 0]\n    let count = 0\n    // Next tag\n    input.onButtonPressed(Button.A, () => {\n        strengths = [0, 0, 0]\n        //basic.clearScreen()\n        radio.sendString(\"REQ\")\n    });\n\n    // Previous tag\n    \n    radio.onReceivedString(msg => {\n        if (msg.indexOf(\"ACK:\") === 0) {\n            const id = parseInt(msg.split(\":\")[1])\n            if (id !== control.deviceSerialNumber()) {\n                return;\n            }\n        } else {\n            return;\n        }\n        const position = parseInt(msg.split(\":\")[2])\n        const signal = radio.receivedPacket(2) + 128\n        strengths[position] = signal;\n        showReception(strengths.filter(v => v !== 0).length)\n        if (!strengths.some(v => v === 0)) {\n            computePosition(strengths);\n        }\n    })\n}\n\nfunction showReception(value: number) {\n    basic.clearScreen();\n    led.plot(0, 0)\n    if (value > 1) {\n        led.plot(1, 0)\n    }\n    if (value > 2) {\n        led.plot(2, 0)\n    }\n}\n\nclass Configuration {\n    constructor(private isBoundary: boolean = true) {\n        new KindConfig((isBoundary: boolean) => this.finishConfig(isBoundary));\n    }\n    finishConfig(isBoundary: boolean) {\n        this.isBoundary = isBoundary;\n        if (this.isBoundary) {\n            new ChooseTagGroup(ConfigureTag);\n        } else {\n            ConfigureClient();\n        }\n    }\n}\n\nclass KindConfig {\n    constructor(next: (isBoudary: boolean) => void, private isBoundary: boolean = true) {\n        input.onButtonPressed(Button.A, () => this.changeKind());\n        input.onButtonPressed(Button.B, () => next(this.isBoundary));\n        this.show();\n    }\n    changeKind() {\n        this.isBoundary = !this.isBoundary;\n        this.show();\n    }\n    show() {\n        if (this.isBoundary) {\n            basic.showIcon(IconNames.Square)\n        } else {\n            basic.clearScreen()\n            led.plot(2, 2)\n        }\n    }\n}\n\nclass ChooseTagGroup {\n    constructor(next: (group: number) => void, private group: number = 0) {\n        input.onButtonPressed(Button.A, () => this.changeGroup());\n        input.onButtonPressed(Button.B, () => next(this.group));\n        this.show();\n    }\n    changeGroup() {\n        this.group = (this.group + 1) % 255;\n        this.show();\n    }\n    show() {\n        basic.showNumber(this.group);\n    }\n}\n\nnew Configuration()","README.md":"","pxt.json":"{\n    \"name\": \"Burn cold game\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\"\n    ],\n    \"preferredEditor\": \"tsprj\"\n}\n"}},{"timestamp":1742680134901,"editorVersion":"7.0.57","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"pxt-on-start\" x=\"20\" y=\"20\"></block><block type=\"device_forever\" x=\"225\" y=\"20\"></block></xml>","main.ts":"// Two cases : bound for position or client who searching position\n\nfunction ConfigureTag(group: number) {\n    basic.clearScreen()\n    radio.setGroup(group);\n    radio.setTransmitSerialNumber(true)\n    basic.showNumber(group)\n    let transmitPower = 6;\n    \n    //Change transmit power\n    input.onButtonPressed(Button.A, () => {\n        transmitPower = (transmitPower + 1) % 8\n        radio.setTransmitPower(transmitPower)\n        basic.showNumber(transmitPower)\n        basic.pause(2000)\n        basic.showNumber(group)\n    })\n   \n   // Send message every second\n   basic.forever(()=> {\n       radio.sendString(\"TAG\")\n   })\n}\n\nfunction transformPower(value: number): number {\n    // Affine function y = x (-√2/20) + 5√2\n    return value * (Math.sqrt(2) / -20) + 5 * Math.sqrt(2);\n}\n\nfunction computePosition(strengths: number[]) {\n    //basic.showIcon(IconNames.Rollerskate)\n    const longDistance = Math.sqrt(2) * 4\n    // Transform power to relative distance. 100 is distance 0, 50 is half, 20 is long (arbiatrary)\n    const dA = transformPower(strengths[0]);\n    const dB = transformPower(strengths[1]);\n    const dC = transformPower(strengths[2]);\n    // Resolve equation\n    const y = Math.sqrt(dA * dA - Math.pow((dA * dA - dB * dB + 16) / 8, 2))\n    const x = Math.sqrt(dA * dA - y * y)\n    basic.clearScreen()\n    led.plot(x, y)\n}\n\nfunction changeGroup(shift: number){\n    currentRadioGroup = (currentRadioGroup + shift) % 255\n    basic.showNumber(currentRadioGroup)\n    radio.setGroup(currentRadioGroup)\n    // Could try with frequency also\n}\n\nlet currentRadioGroup = 0;\nfunction ConfigureClient() {\n    \n    radio.setGroup(currentRadioGroup)\n\n    basic.clearScreen()\n    let strengths = [0, 0, 0]\n    let count = 0\n    // Next tag\n    input.onButtonPressed(Button.A, () => {\n        changeGroup(1)\n    });\n    input.onButtonPressed(Button.B, () => {\n        changeGroup(-1)\n    });\n\n    // When tag is found (enough close, power > 90), validate target\n    input.onLogoEvent(TouchButtonEvent.Pressed,()=> {\n        if(radio.receivedPacket(2) + 128 > 90){\n            // OK\n        }\n    })\n    // Previous tag\n\n    radio.onReceivedString(msg => {\n        if (msg.indexOf(\"TAG\") !== 0) {\n            basic.showIcon(IconNames.Target)\n            return;\n        }\n        const signal = radio.receivedPacket(2) + 128\n        if(signal > 80){\n\n        }\n        if (signal > 60 && signal <= 80) {\n\n        }\n        if (signal > 40 && signal <= 60) {\n\n        }\n        if (signal > 20 && signal <= 40) {\n\n        }\n    })\n}\n\nfunction showReception(value: number) {\n    basic.clearScreen();\n    led.plot(0, 0)\n    if (value > 1) {\n        led.plot(1, 0)\n    }\n    if (value > 2) {\n        led.plot(2, 0)\n    }\n}\n\nclass Configuration {\n    constructor(private isBoundary: boolean = true) {\n        new KindConfig((isBoundary: boolean) => this.finishConfig(isBoundary));\n    }\n    finishConfig(isBoundary: boolean) {\n        this.isBoundary = isBoundary;\n        if (this.isBoundary) {\n            new ChooseTagGroup(ConfigureTag);\n        } else {\n            ConfigureClient();\n        }\n    }\n}\n\nclass KindConfig {\n    constructor(next: (isBoudary: boolean) => void, private isBoundary: boolean = true) {\n        input.onButtonPressed(Button.A, () => this.changeKind());\n        input.onButtonPressed(Button.B, () => next(this.isBoundary));\n        this.show();\n    }\n    changeKind() {\n        this.isBoundary = !this.isBoundary;\n        this.show();\n    }\n    show() {\n        if (this.isBoundary) {\n            basic.showIcon(IconNames.Square)\n        } else {\n            basic.clearScreen()\n            led.plot(2, 2)\n        }\n    }\n}\n\nclass ChooseTagGroup {\n    constructor(next: (group: number) => void, private group: number = 0) {\n        input.onButtonPressed(Button.A, () => this.changeGroup());\n        input.onButtonPressed(Button.B, () => next(this.group));\n        this.show();\n    }\n    changeGroup() {\n        this.group = (this.group + 1) % 255;\n        this.show();\n    }\n    show() {\n        basic.showNumber(this.group);\n    }\n}\n\nnew Configuration()","README.md":"","pxt.json":"{\n    \"name\": \"Burn cold game\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\"\n    ],\n    \"preferredEditor\": \"tsprj\"\n}\n"}},{"timestamp":1742748018774,"editorVersion":"7.0.57","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"pxt-on-start\" x=\"20\" y=\"20\"></block><block type=\"device_forever\" x=\"225\" y=\"20\"></block></xml>","main.ts":"// Two cases : bound for position or client who searching position\n\nfunction ConfigureTag(group: number) {\n    basic.clearScreen()\n    radio.setGroup(group);\n    radio.setTransmitSerialNumber(true)\n    basic.showNumber(group)\n    let transmitPower = 6;\n    \n    //Change transmit power\n    input.onButtonPressed(Button.A, () => {\n        transmitPower = (transmitPower + 1) % 8\n        radio.setTransmitPower(transmitPower)\n        basic.showNumber(transmitPower)\n        basic.pause(2000)\n        basic.showNumber(group)\n    })\n   \n   // Send message every second\n   basic.forever(()=> {\n       radio.sendString(\"TAG\")\n   })\n}\n\nfunction transformPower(value: number): number {\n    // Affine function y = x (-√2/20) + 5√2\n    return value * (Math.sqrt(2) / -20) + 5 * Math.sqrt(2);\n}\n\nfunction computePosition(strengths: number[]) {\n    //basic.showIcon(IconNames.Rollerskate)\n    const longDistance = Math.sqrt(2) * 4\n    // Transform power to relative distance. 100 is distance 0, 50 is half, 20 is long (arbiatrary)\n    const dA = transformPower(strengths[0]);\n    const dB = transformPower(strengths[1]);\n    const dC = transformPower(strengths[2]);\n    // Resolve equation\n    const y = Math.sqrt(dA * dA - Math.pow((dA * dA - dB * dB + 16) / 8, 2))\n    const x = Math.sqrt(dA * dA - y * y)\n    basic.clearScreen()\n    led.plot(x, y)\n}\n\nfunction changeGroup(shift: number){\n    currentRadioGroup = (currentRadioGroup + shift) % 255\n    basic.showNumber(currentRadioGroup)\n    radio.setGroup(currentRadioGroup)\n    // Could try with frequency also\n}\n\nlet currentRadioGroup = 0;\nfunction ConfigureClient() {\n    \n    radio.setGroup(currentRadioGroup)\n\n    basic.clearScreen()\n    let strengths = [0, 0, 0]\n    let count = 0\n    // Next tag\n    input.onButtonPressed(Button.A, () => {\n        changeGroup(1)\n    });\n    input.onButtonPressed(Button.B, () => {\n        changeGroup(-1)\n    });\n\n    // When tag is found (enough close, power > 90), validate target\n    input.onLogoEvent(TouchButtonEvent.Pressed,()=> {\n        if(radio.receivedPacket(2) + 128 > 90){\n            // OK\n        }\n    })\n    // Previous tag\n\n    radio.onReceivedString(msg => {\n        if (msg.indexOf(\"TAG\") !== 0) {\n            basic.showIcon(IconNames.Target)\n            return;\n        }\n        const signal = radio.receivedPacket(2) + 128;\n        showLine(Math.floor(signal / 20))\n    })\n}\n\nfunction showLine(line: number){\n    basic.clearScreen()\n    for(let i = 0 ; i <= line ; i++){\n        for(let j = 0 ; j <= 4 ; j++){\n            led.plot(i,j);\n        }\n    }\n}\n\nfunction showReception(value: number) {\n    basic.clearScreen();\n    led.plot(0, 0)\n    if (value > 1) {\n        led.plot(1, 0)\n    }\n    if (value > 2) {\n        led.plot(2, 0)\n    }\n}\n\nclass Configuration {\n    constructor(private isBoundary: boolean = true) {\n        new KindConfig((isBoundary: boolean) => this.finishConfig(isBoundary));\n    }\n    finishConfig(isBoundary: boolean) {\n        this.isBoundary = isBoundary;\n        if (this.isBoundary) {\n            new ChooseTagGroup(ConfigureTag);\n        } else {\n            ConfigureClient();\n        }\n    }\n}\n\nclass KindConfig {\n    constructor(next: (isBoudary: boolean) => void, private isBoundary: boolean = true) {\n        input.onButtonPressed(Button.A, () => this.changeKind());\n        input.onButtonPressed(Button.B, () => next(this.isBoundary));\n        this.show();\n    }\n    changeKind() {\n        this.isBoundary = !this.isBoundary;\n        this.show();\n    }\n    show() {\n        if (this.isBoundary) {\n            basic.showIcon(IconNames.Square)\n        } else {\n            basic.clearScreen()\n            led.plot(2, 2)\n        }\n    }\n}\n\nclass ChooseTagGroup {\n    constructor(next: (group: number) => void, private group: number = 0) {\n        input.onButtonPressed(Button.A, () => this.changeGroup());\n        input.onButtonPressed(Button.B, () => next(this.group));\n        this.show();\n    }\n    changeGroup() {\n        this.group = (this.group + 1) % 255;\n        this.show();\n    }\n    show() {\n        basic.showNumber(this.group);\n    }\n}\n\nnew Configuration()","README.md":"","pxt.json":"{\n    \"name\": \"Burn cold game\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\"\n    ],\n    \"preferredEditor\": \"tsprj\"\n}\n"}},{"timestamp":1742761687217,"editorVersion":"7.0.57","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"pxt-on-start\" x=\"20\" y=\"20\"></block><block type=\"device_forever\" x=\"225\" y=\"20\"></block></xml>","main.ts":"// Two cases : bound for position or client who searching position\n\nfunction ConfigureTag(group: number) {\n    basic.clearScreen()\n    radio.setGroup(group);\n    radio.setTransmitSerialNumber(true)\n    basic.showNumber(group)\n    let transmitPower = 6;\n    \n    //Change transmit power\n    input.onButtonPressed(Button.A, () => {\n        transmitPower = (transmitPower + 1) % 8\n        radio.setTransmitPower(transmitPower)\n        basic.showNumber(transmitPower)\n    })\n\n    input.onLogoEvent(TouchButtonEvent.Pressed, () => basic.showNumber(group))\n   \n   // Send message every second\n   basic.forever(()=> {\n       radio.sendString(\"TAG\")\n       basic.pause(1000);\n   })\n}\n\nfunction changeGroup(shift: number){\n    currentRadioGroup = (currentRadioGroup + shift + 255) % 255\n    basic.showNumber(currentRadioGroup)\n    radio.setGroup(currentRadioGroup)\n    // Could try with frequency also\n}\n\nlet currentRadioGroup = 0;\nfunction ConfigureClient() {\n    let  \n    radio.setGroup(currentRadioGroup)\n\n    basic.clearScreen()\n    let strengths = [0, 0, 0]\n    let count = 0\n    // Next tag\n    input.onButtonPressed(Button.A, () => {\n        changeGroup(-1)\n    });\n    input.onButtonPressed(Button.B, () => {\n        changeGroup(1)\n    });\n\n    // When tag is found (enough close, power > 90), validate target\n    input.onLogoEvent(TouchButtonEvent.Pressed,()=> {\n        if(radio.receivedPacket(2) + 128 > 90){\n            // OK\n            basic.showIcon(IconNames.Yes)\n        }\n    })\n    // Previous tag\n\n    radio.onReceivedString(msg => {\n        if (msg.indexOf(\"TAG\") !== 0) {\n            basic.showIcon(IconNames.Target)\n            return;\n        }\n        const signal = radio.receivedPacket(2) + 128;\n        showLine(Math.floor(signal / 20))\n    })\n}\n\nfunction showLine(line: number){\n    basic.clearScreen()\n    for(let i = 0 ; i <= line ; i++){\n        for(let j = 0 ; j <= 4 ; j++){\n            led.plot(i,j);\n        }\n    }\n}\n\nfunction showReception(value: number) {\n    basic.clearScreen();\n    led.plot(0, 0)\n    if (value > 1) {\n        led.plot(1, 0)\n    }\n    if (value > 2) {\n        led.plot(2, 0)\n    }\n}\n\nclass Configuration {\n    constructor(private isBoundary: boolean = true) {\n        new KindConfig((isBoundary: boolean) => this.finishConfig(isBoundary));\n    }\n    finishConfig(isBoundary: boolean) {\n        this.isBoundary = isBoundary;\n        if (this.isBoundary) {\n            new ChooseTagGroup(ConfigureTag);\n        } else {\n            ConfigureClient();\n        }\n    }\n}\n\nclass KindConfig {\n    constructor(next: (isBoudary: boolean) => void, private isBoundary: boolean = true) {\n        input.onButtonPressed(Button.A, () => this.changeKind());\n        input.onButtonPressed(Button.B, () => next(this.isBoundary));\n        this.show();\n    }\n    changeKind() {\n        this.isBoundary = !this.isBoundary;\n        this.show();\n    }\n    show() {\n        if (this.isBoundary) {\n            basic.showIcon(IconNames.Square)\n        } else {\n            basic.clearScreen()\n            led.plot(2, 2)\n        }\n    }\n}\n\nclass ChooseTagGroup {\n    constructor(next: (group: number) => void, private group: number = 0) {\n        input.onButtonPressed(Button.A, () => this.changeGroup());\n        input.onButtonPressed(Button.B, () => next(this.group));\n        this.show();\n    }\n    changeGroup() {\n        this.group = (this.group + 1) % 255;\n        this.show();\n    }\n    show() {\n        basic.showNumber(this.group);\n    }\n}\n\nnew Configuration()","README.md":"","pxt.json":"{\n    \"name\": \"Burn cold game\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\"\n    ],\n    \"preferredEditor\": \"tsprj\"\n}\n"}},{"timestamp":1742763880991,"editorVersion":"7.0.57","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"pxt-on-start\" x=\"20\" y=\"20\"></block><block type=\"device_forever\" x=\"225\" y=\"20\"></block></xml>","main.ts":"// Two cases : bound for position or client who searching position\n\nfunction ConfigureTag(group: number) {\n    basic.clearScreen()\n    radio.setGroup(group);\n    radio.setTransmitSerialNumber(true)\n    basic.showNumber(group)\n    let transmitPower = 6;\n    \n    //Change transmit power\n    input.onButtonPressed(Button.A, () => {\n        transmitPower = (transmitPower + 1) % 8\n        radio.setTransmitPower(transmitPower)\n        basic.showNumber(transmitPower)\n    })\n\n    input.onLogoEvent(TouchButtonEvent.Pressed, () => basic.showNumber(group))\n   \n   // Send message every second\n   basic.forever(()=> {\n       radio.sendString(\"TAG\")\n       basic.pause(1000);\n   })\n}\n\nfunction changeGroup(shift: number){\n    currentRadioGroup = (currentRadioGroup + shift + 255) % 255\n    basic.showNumber(currentRadioGroup)\n    radio.setGroup(currentRadioGroup)\n    if(alreadyFound()){\n        basic.showIcon(IconNames.Yes)\n    }\n    // Could try with frequency also\n}\n\nfunction alreadyFound():boolean {\n    return results[currentRadioGroup] != null && results[currentRadioGroup];\n}\n\nlet currentRadioGroup = 0;\nlet results: boolean[] = [];\nfunction ConfigureClient() {\n    \n    radio.setGroup(currentRadioGroup)\n\n    basic.clearScreen()\n    let strengths = [0, 0, 0]\n    let count = 0\n    // Next tag\n    input.onButtonPressed(Button.A, () => {\n        changeGroup(-1)\n    });\n    input.onButtonPressed(Button.B, () => {\n        changeGroup(1)\n    });\n\n    // When tag is found (enough close, power > 90), validate target\n    input.onLogoEvent(TouchButtonEvent.Pressed,()=> {\n        if(alreadyFound()){\n            return;\n        }\n        if(radio.receivedPacket(2) + 128 > 90){\n            // OK\n            results[currentRadioGroup] = true;\n            basic.showIcon(IconNames.Yes)\n        }\n    })\n    // Previous tag\n\n    radio.onReceivedString(msg => {\n        if (alreadyFound()){\n            return;\n        }\n        if (msg.indexOf(\"TAG\") !== 0) {\n            basic.showIcon(IconNames.Target)\n            return;\n        }\n        const signal = radio.receivedPacket(2) + 128;\n        showLine(Math.floor(signal / 20))\n    })\n}\n\nfunction showLine(line: number){\n    basic.clearScreen()\n    for(let i = 0 ; i <= line ; i++){\n        for(let j = 0 ; j <= 4 ; j++){\n            led.plot(i,j);\n        }\n    }\n}\n\nfunction showReception(value: number) {\n    basic.clearScreen();\n    led.plot(0, 0)\n    if (value > 1) {\n        led.plot(1, 0)\n    }\n    if (value > 2) {\n        led.plot(2, 0)\n    }\n}\n\nclass Configuration {\n    constructor(private isBoundary: boolean = true) {\n        new KindConfig((isBoundary: boolean) => this.finishConfig(isBoundary));\n    }\n    finishConfig(isBoundary: boolean) {\n        this.isBoundary = isBoundary;\n        if (this.isBoundary) {\n            new ChooseTagGroup(ConfigureTag);\n        } else {\n            ConfigureClient();\n        }\n    }\n}\n\nclass KindConfig {\n    constructor(next: (isBoudary: boolean) => void, private isBoundary: boolean = true) {\n        input.onButtonPressed(Button.A, () => this.changeKind());\n        input.onButtonPressed(Button.B, () => next(this.isBoundary));\n        this.show();\n    }\n    changeKind() {\n        this.isBoundary = !this.isBoundary;\n        this.show();\n    }\n    show() {\n        if (this.isBoundary) {\n            basic.showIcon(IconNames.Square)\n        } else {\n            basic.clearScreen()\n            led.plot(2, 2)\n        }\n    }\n}\n\nclass ChooseTagGroup {\n    constructor(next: (group: number) => void, private group: number = 0) {\n        input.onButtonPressed(Button.A, () => this.changeGroup());\n        input.onButtonPressed(Button.B, () => next(this.group));\n        this.show();\n    }\n    changeGroup() {\n        this.group = (this.group + 1) % 255;\n        this.show();\n    }\n    show() {\n        basic.showNumber(this.group);\n    }\n}\n\nnew Configuration()","README.md":"","pxt.json":"{\n    \"name\": \"Burn cold game\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\"\n    ],\n    \"preferredEditor\": \"tsprj\"\n}\n"}}],"shares":[],"lastSaveTime":1742763880996}